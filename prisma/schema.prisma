// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Products {
  id          String      @id @default(cuid())
  description String
  price       Float
  imageUrl    String
  productName String
  quantity    Float
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  public_id   String      @unique
  categoryId  String?
  brandId     String?
  orderItems  OrderItem[]

  brand     Brand?    @relation(fields: [brandId], references: [id])
  categorys Category? @relation(fields: [categoryId], references: [id])

  @@index([productName])
  @@index([brandId])
  @@index([categoryId])
}

model Category {
  id           String     @id @default(cuid())
  categoryName String
  products     Products[]

  @@index([categoryName])
}

model Brand {
  id        String     @id @default(cuid())
  brandName String
  products  Products[]
  public_id String?

  @@index([brandName])
}

model Order {
  id         String      @id @default(cuid())
  orderItems OrderItem[]
  phone      String
  address    String
  createdAt  DateTime    @default(now())

  @@index([phone])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
